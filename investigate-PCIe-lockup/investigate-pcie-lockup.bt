#!/usr/bin/bpftrace

/*
  Record tids of callers to usb_autoresume_device().   If the resumption
  triggers pci_mmcfg_read(), record the time that function takes.   Also
  track the lock-contention time of any locks the thread takes.  If a 1s
  lock-contention threshold is exceeded, dump the stacks.
*/

#define NSECS_TO_S 1000000000
// Ten seconds threshold.
#define LOCK_REPORTING_THRESHOLD 10
// In ns: 10 micros.
#define PCIE_SPY_THRESHOLD 10000

// Capture the TID of the thread calling usb_autoresume_device().
fentry:usbcore:usb_autoresume_device
{
    @usb_resumer_tid = tid;
    // Suppress too-voluminous printing.
    // $dev = (struct usb_device*)args->udev;
    //ERROR: BPF_FUNC_d_path not available for your kernel version
    //@path = path($dev->devpath);
    //printf("%s: %s at 00%d:00%d woken by tid $%lld\n", strftime("%H:%M:%S", nsecs), str($dev->product), $dev->bus->busnum, $dev->devnum, tid);
}

// Only trace PCIe if USB has woken it.
kprobe:pci_mmcfg_read
{
   if (tid == @usb_resumer_tid) {
      @cfg_read_start[tid,comm] = nsecs;
   }
}

kretprobe:pci_mmcfg_read
/ @cfg_read_start[tid,comm] != 0 /
{
   $elapsed = nsecs-@cfg_read_start[tid,comm];
   if ($elapsed > PCIE_SPY_THRESHOLD) {
      printf("pci_mmcfg_read() for comm %s with tid %lld took %lld s\n", comm, tid, (nsecs-@cfg_read_start[tid,comm])/NSECS_TO_S);
   }
   clear(@cfg_read_start);
}

// Only trace locks if USB-resume thread holds them.
tracepoint:lock:contention_begin
{
    if (tid == @usb_resumer_tid) {
        @lock = args.lock_addr;
        @held_lock[tid, @lock] = nsecs;
    }
}

tracepoint:lock:contention_end
/@lock != 0 && @held_lock[tid, @lock] != 0/
{
    @lock_duration[tid,@lock] = (nsecs - @held_lock[tid, @lock])/NSECS_TO_S;
    if (@lock_duration[tid,@lock] > LOCK_REPORTING_THRESHOLD) {
        printf("%s: lock contended for %llds\n", comm, @lock_duration[tid,@lock]);
        print(ustack());
        print(kstack());
    }
    clear(@lock);
    clear(@lock_duration);
    clear(@held_lock);
}

END
{
    clear(@usb_resumer_tid);
}
